version: '3.8'
services:
  kafka1:
    image: confluentinc/cp-kafka:5.4.2
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
  schemaregistry:
    image: confluentinc/cp-schema-registry:5.4.2
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - 8085:8085
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: password
    volumes:
      - ./storage:/data
    command: server --console-address ":9001" /data
  aws_glue:
    image: amazon/aws-glue-libs:glue_libs_4.0.0_image_01
    container_name: aws_glue
    ports:
      - 4040:4040
      - 18080:18080
      - 8998:8998
      - 8888:8888
    environment:
      DISABLE_SSL: "true"
    restart: always
    volumes:
      - ./.aws:/home/glue_user/.aws
    command: /home/glue_user/jupyter/jupyter_start.sh
  pgsql:
    image: postgres:15
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      PGPASSWORD: '${DB_PASSWORD:-secret}'
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD:--secret}
    volumes:
      - postgres:/var/lib/postgresql/data
    depends_on:
      - aws_glue
  mongodb:
    container_name: book_store_db
    image: mongo:6.0
    env_file: ./.env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - $DB_PORT:$DB_PORT
    restart: unless-stopped
    volumes:
      - book_store_mongo_db:/data/db
  app:
    depends_on:
      - mongodb
    build: ./book-store-api
    restart: unless-stopped
    env_file: ./.env
    ports:
      - $NODE_PORT:$NODE_PORT
    environment:
      DB_HOST: mongodb
      DB_USERNAME: $DB_USERNAME
      DB_PASSWORD: $DB_PASSWORD
      DB_NAME: $DB_NAME
      DB_PORT: $DB_PORT
  ui:
    build: ./book-store-ui
    restart: unless-stopped
    ports:
      - $UI_PORT:$UI_PORT
volumes:
  book_store_mongo_db:
  kafka:
  zookeeper:
  minio:
  postgres:
  aws_glue:
